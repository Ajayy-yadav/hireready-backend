// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String             @id @default(uuid())
  email                    String             @unique
  imageKey                 String? // Store S3 key for profile image
  username                 String
  currentRole              String
  resumeKey                String? // Store S3 key for resume
  latestResumeScore        Int? // Latest resume compatibility score (0-100)
  latestInterviewScore     Int? // Latest interview overall score (0-100)
  totalInterviews          Int                @default(0) // Count of completed interviews
  lastResumeAnalysisAt     DateTime? // Timestamp of last resume analysis
  lastInterviewCompletedAt DateTime? // Timestamp of last completed interview
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  interviews               InterviewSession[]

  @@map("users")
}

model InterviewSession {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobDescription    String    @db.Text
  status            String    @default("in_progress") // in_progress, completed, cancelled
  currentQuestion   Int       @default(0)
  totalQuestions    Int       @default(5)
  history           Json      @default("[]") // Array of {role: string, content: string}
  metadata          Json      @default("{}") // Store pre-generated questions and other data
  videoRecordingKey String? // Store S3 key for interview recording video
  feedback          Json? // Store AI-generated feedback {overallScore, strengths, areasForImprovement, detailedFeedback, recommendations}
  feedbackCounted   Boolean   @default(false) // Track if this interview was counted in user's totalInterviews
  startedAt         DateTime  @default(now())
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("interview_sessions")
}
